plugins {
    id "me.champeau.jmh"
}

description = "PerfMark API"
ext.moduleName = "io.perfmark"
ext.jdkVersion = JavaVersion.VERSION_1_6

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}


sourceSets {
    jmhTest {
    }
}

compileJava {
    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion

    options.compilerArgs.add("-Xlint:-options")
}

dependencies {
    compileOnly libraries.jsr305,
            libraries.errorprone
    testImplementation project(':perfmark-impl'),
            libraries.truth
    testRuntimeOnly project(':perfmark-java6')

    jmh project(':perfmark-java9'),
            project(':perfmark-java7')

    jmhTestImplementation project(':perfmark-api')
    jmhTestRuntimeOnly project(':perfmark-java9'), project(':perfmark-java7')
    jmhTestImplementation group: 'junit', name: 'junit', version: '4.13.2'
    jmhTestImplementation 'org.openjdk.jmh:jmh-core:1.31'
    jmhTestAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.31'

}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJmhJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

java {
    disableAutoTargetJvm()
}

javadoc {
    exclude 'io/perfmark/Impl**'
}

jmh {

    timeOnIteration = "1s"
    warmup = "1s"
    fork = 400
    warmupIterations = 0

    includes = ["ClassInit"]
    profilers = ["cl"]
    jvmArgs = ["-Dio.perfmark.debug=true"]

    /*
    profilers = ["perfasm"]

    jvmArgs = [
            "-XX:+UnlockDiagnosticVMOptions",
            "-XX:+LogCompilation",
            "-XX:LogFile=/tmp/blah.txt",
            "-XX:+PrintAssembly",
            "-XX:+PrintInterpreter",
            "-XX:+PrintNMethods",
            "-XX:+PrintNativeNMethods",
            "-XX:+PrintSignatureHandlers",
            "-XX:+PrintAdapterHandlers",
            "-XX:+PrintStubCode",
            "-XX:+PrintCompilation",
            "-XX:+PrintInlining",
            "-XX:+TraceClassLoading",
            "-XX:PrintAssemblyOptions=syntax",
            "-XX:PrintAssemblyOptions=intel"
    ]
     */

    //duplicateClassesStrategy DuplicatesStrategy.INCLUDE
}