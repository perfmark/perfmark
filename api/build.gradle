description = "PerfMark API"

if (JavaVersion.current().isJava12Compatible()) {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
} else {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

dependencies {
    compileOnly libraries.jsr305,
            libraries.errorprone
    testImplementation project(':perfmark-impl'),
            libraries.truth
    testRuntimeOnly project(':perfmark-java6')

    jmh project(':perfmark-java9'),
            project(':perfmark-java7')
}

compileTestJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

compileJmhJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

java {
    disableAutoTargetJvm()
}

javadoc {
    exclude 'io/perfmark/Impl**'
}

jmh {
    timeOnIteration = "1s"
    warmup = "1s"
    fork = 1
    warmupIterations = 10

    duplicateClassesStrategy "include"

    /*
    profilers = ["perfasm"]

    jvmArgs = [
            "-XX:+UnlockDiagnosticVMOptions",
            "-XX:+LogCompilation",
            "-XX:LogFile=/tmp/blah.txt",
            "-XX:+PrintAssembly",
            "-XX:+PrintInterpreter",
            "-XX:+PrintNMethods",
            "-XX:+PrintNativeNMethods",
            "-XX:+PrintSignatureHandlers",
            "-XX:+PrintAdapterHandlers",
            "-XX:+PrintStubCode",
            "-XX:+PrintCompilation",
            "-XX:+PrintInlining",
            "-XX:+TraceClassLoading",
            "-XX:PrintAssemblyOptions=syntax",
            "-XX:PrintAssemblyOptions=intel"
    ]
    */

}
